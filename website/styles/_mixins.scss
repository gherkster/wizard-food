@use "sass:map";

@use "variables" as v;

@mixin responsive-text($font-min, $font-max, $screen-min, $screen-max) {
  font-size: #{$font-min}px;

  @media only screen and (min-width: #{$screen-min}px) {
    font-size: calc(
      #{$font-min}px + #{($font-max - $font-min)} * (100vw - #{$screen-min}px) / (#{$screen-max} - #{$screen-min})
    );
  }

  @media only screen and (min-width: #{$screen-max}px) {
    font-size: #{$font-max}px;
  }
}

@mixin create-cols($breakpoint-name, $max-cols) {
  $infix: if($breakpoint-name == null, "", "-#{$breakpoint-name}");

  @for $i from 1 through $max-cols {
    .col#{$infix}-#{$i} {
      display: flex;
      // Reduce each column flex-basis (width) by a percentage of the column-gap
      // to provide spacing between columns while not inadvertently wrapping around to the next row
      flex-basis: calc((100% - ((#{$max-cols} / #{$i}) - 1) * #{v.$cols-horizontal-gap}) / (#{$max-cols} / #{$i}));
      flex-direction: column;
    }
    .row.wide-gap > .col#{$infix}-#{$i} {
      flex-basis: calc((100% - ((#{$max-cols} / #{$i}) - 1) * #{v.$cols-horizontal-gap-wide}) / (#{$max-cols} / #{$i}));
    }
  }
}

@mixin spacing($type: "p", $size: "md") {
  $size-map: map.get(
    $map: v.$spacing,
    $key: $size,
  );

  $prop: map.get(
    $map: v.$space-map,
    $key: $type,
  );
  @each $p in $prop {
    @each $bp, $size in $size-map {
      @include breakpoint($bp) {
        #{$p}: $size;
      }
    }
  }
}

@mixin breakpoint($bp: "md", $type: "min") {
  @if $type == "min" {
    @media (min-width: (map.get(v.$breakpoints, $bp) * 1px)) {
      @content;
    }
  } @else {
    @media (max-width: (map.get(v.$breakpoints, $bp) * 1px)) {
      @content;
    }
  }
}

@mixin small-device-only() {
  @media (min-width: (map.get(v.$breakpoints, md) * 1px)) {
    display: none;
  }
}

@mixin large-device-only() {
  @media (max-width: (map.get(v.$breakpoints, md) * 1px)) {
    display: none;
  }
}
