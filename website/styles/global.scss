@use "mixins" as m;
@use "variables" as v;

* {
  box-sizing: border-box;
}

html {
  background: var(--theme-body-background-color);
}
body {
  margin: 0; // Unset browser margin
  color: var(--theme-font-color);
  font-family: v.$font-family-paragraph;
  text-underline-offset: 3px;
}

html, body {
  height: 100%;
}

@each $key, $value in v.$font-sizes {
  #{$key} {
    @include m.responsive-text(map-get($value, font-size-min), map-get($value, font-size-max), v.$breakpoint-min, v.$breakpoint-max)
  }
}

h1, h2, h3, h4, h5, h6 {
  font-family: v.$font-family-headers;
  font-weight: v.$font-weight-regular;
  margin: 0 0 v.$header-margin-bottom 0;
}

p {
  margin-top: v.$paragraph-margin-top;
  margin-bottom: v.$paragraph-margin-bottom;
  line-height: v.$line-height;
}

span {
  line-height: v.$line-height;
}

b {
  font-weight: v.$font-weight-bold;
}

small {
  margin-top: 0;
}

ul {
  margin: 0;
}

li:not(:last-child) {
  margin-bottom: v.$li-margin-bottom;
}

a {
  color: var(--theme-link-color);
}

a.concealed {
  text-decoration: none;
  color: var(--theme-font-color);
  &:hover {
    text-decoration: underline;
  }
  &:visited {
    color: var(--theme-font-color);
  }
}

img {
  width: 100%;
  height: auto;
}

.control {
  &.large {
    .control__label {
      font-size: #{map-get(map-get(v.$font-sizes, html), font-size-max)}px;
    }
  }
}

input {
  color: var(--theme-font-color);
}

.text-muted {
  color: var(--theme-font-color-muted);
}

.rich-text {
  margin-top: 0;
  a {
    text-decoration: underline;
  }
}
